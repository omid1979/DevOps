from flask import Flask, render_template, request, redirect, url_for, flash
import socket
import paramiko
import subprocess
import os

app = Flask(__name__)
app.secret_key = 'secret_key'

IP_LIST_FILE = 'ips.txt'
#GIT_REPO_URL = 'https://github.com/omid1979/config.git'
GIT_REPO_URL = 'git@github.com:omid1979/config.git' 
LOCAL_CONFIG_DIR = 'config_repo'
#REMOTE_CONFIG_PATHS = ['/etc/ssh/sshd_config']  # مثال
CONFIG_FILES = {
    'sshd_config': '/etc/ssh/sshd_config',
    'custom_config.conf': '/etc/custom/custom_config.conf',
    # Add more config files and paths here as needed
}

SSH_USERNAME = 'root'  # SSH username to connect with
PRIVATE_KEY_PATH = '/home/omid/.ssh/id_rsa.key'  # Path to the SSH private key file

def read_ips(file_path):
    """
    Read IP addresses from a file, one per line.
    Empty lines are ignored.
    """
    ips = []
    with open(file_path, 'r') as f:
        for line in f:
            ip = line.strip()
            if ip:
                ips.append(ip)
    return ips

def check_ssh(ip, port=22, timeout=5):
    """
    Check if SSH port is open on the given IP address.
    Returns True if connection succeeded, False otherwise.
    """
    try:
        sock = socket.create_connection((ip, port), timeout=timeout)
        sock.close()
        return True
    except:
        return False

def update_git_repo():
    """
    Clone the git repository if not already cloned.
    Otherwise, pull the latest changes.
    Returns True on success, False on failure.
    """
    if not os.path.exists(LOCAL_CONFIG_DIR):
        result = subprocess.run(['git', 'clone', GIT_REPO_URL, LOCAL_CONFIG_DIR])
        return result.returncode == 0
    else:
        result = subprocess.run(['git', '-C', LOCAL_CONFIG_DIR, 'pull'])
        return result.returncode == 0

def clone_git_repo():
    """
    Clone the git repository if not already cloned.
    Otherwise, pull the latest changes.
    Returns True on success, False on failure.
    """
    if os.path.exists(LOCAL_CONFIG_DIR):
        subprocess.run(['rm', '-rf', LOCAL_CONFIG_DIR])
    result = subprocess.run(['git', 'clone', GIT_REPO_URL, LOCAL_CONFIG_DIR])
    return result.returncode == 0

def copy_config_to_server(ip):
    """
    Connect to the server via SSH using private key authentication,
    and copy all config files from the local git repo to their respective remote paths.
    Returns a tuple (success: bool, message: str).
    """
    try:
        # Load private key for authentication
        key = paramiko.RSAKey.from_private_key_file(PRIVATE_KEY_PATH)
        # Initialize SSH client and set policy to add unknown hosts automatically
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip, username=SSH_USERNAME, pkey=key, timeout=10)
        sftp = ssh.open_sftp()
        for local_file in os.listdir(LOCAL_CONFIG_DIR):
            local_path = os.path.join(LOCAL_CONFIG_DIR, local_file)
            for remote_path in REMOTE_CONFIG_PATHS:
                try:
                    sftp.put(local_path, remote_path)
                except Exception as e:
                    return False, f'Error copying to {remote_path}: {str(e)}'
        sftp.close()
        ssh.close()
        return True, 'File(s) transferred successfully'
    except Exception as e:
        return False, str(e)

@app.route('/', methods=['GET', 'POST'])
def index():
    ips = read_ips(IP_LIST_FILE)
    status = {}
    for ip in ips:
        status[ip] = check_ssh(ip)
    if request.method == 'POST':
        selected_ip = request.form.get('selected_ip')
        #username = request.form.get('username')
        #password = request.form.get('password')
        if not selected_ip : #or not username or not password:
            flash('لطفاً همه فیلدها را پر کنید.', 'error')
            return redirect(url_for('index'))
        if not clone_git_repo():
            flash('خطا در کلون کردن مخزن گیت.', 'error')
            return redirect(url_for('index'))
        success, message = copy_config_to_server(selected_ip, username) #, password)
        if success:
            flash(f'انتقال فایل به {selected_ip} با موفقیت انجام شد.', 'success')
        else:
            flash(f'خطا در انتقال فایل به {selected_ip}: {message}', 'error')
        return redirect(url_for('index'))
    return render_template('index.html', ips=ips, status=status)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

